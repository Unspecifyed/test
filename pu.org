* Crontab
  Schedules tasks; min hour day-of-the-month month day-of-the-week.
  Ex: crontab -e opens a text file.
  Ex: 00 05 * * 0 ls > /home/francis/cronres.txt
* Git
** Git start project 
  git init
  git remote add origin https://github.com/...
** Git configure
   git config --global user.name "Francis"
   git config --global user.email francis@email.com
** Git pull
   git pull origin master
*** Set upstream
    git branch --set-upstream-to=origin/master
** Git add and push
   git add filename ; or
   git add -A ; for all files
   git commit -m "updated"; commits to master branch
** Git remove
   git rm -r -f directory-name ; removes a directory 
** Git ignore
   git-ignore directory-name/* ;ignores a directory
** Git merge
   git fetch origin master; gets from the repository that is ahead.
   git merge; adds your changes to the repository as well as the new one.
** Git branches
   git checkout v01 ; or
   git checkout master
   git merge v01 master
   git push origin master
*** make new branch
    git branch name-of-branch
    git pull
    git checkout -b name-of-branch
    git push origin name-of-branch
*** Delete branch
    git branch -d name-of-branch; deletes local
    git branch -D name-of-branch; force delete
* Tar
  tar -xvcf for tar.gz
  tar -xvf creates a bundle directory
* Meteor
** init
   meteor create todo
   meteor add twbs:bootstrap
   meteor add kadira:react-layout kadira:flow-router
   webstorm; an ide
   
   meteor build ../todo-app
   cp todo.tar.gz /var/www/html
   tar -xvf ; creates a bundle directory
   install node.js
   cd programs/server
   sudo npm install 
   sudo systemctl start mongodb
   mongo
   use app
   db.createUser({name: "francis", pwd: "password", roles: [{role: "readWrite", db: "app"}]})
   /etc/mongodb.conf
   auth =true
   sudo systemctl restart mongodb
   sudo a2enmod proxy
   sudo a2enmod proxy_html
   sudo a2enmod proxy_http
   /etc/apache2
   touch ./sites-available/app.conf
   <VirtualHost *:80>
   ServerName app.localhost
   ProxyRequests Off
   
   <Proxy *>
   order deny,allow
   Allow from all
   </Proxy>
   
   <Location />
   ProxyPass http://localhost:58080/
   ProxyPassReverse http://localhost:58080/
   </Location>
   
   sudo a2ensite app
   sudo systemctl restart apache2
   /var/www/html/bundle
   export MYVAR="This is a variable"
   echo $MYVAR
   ~/Documents/env.sh
   #!/user/bin/sh
   export PORT=58080
   export ROOT_URL=http://app.localhost
   export MONGOT_URL=mongotdb://francis:password@localhost:27017/app
   source ~/Documents/env.sh
   echo $PORT
   nodejs main.js
   sudo npm install -g forever
   forever start main.js
   
   sudo a2enmod rewrite
   sudo apt-get install phpmyadmin
   /etc/apache2/apache2.conf
   include /etc/phpmyadmin/apache.conf
   sudo systemctl restart apache2
   
   
   create Directorys in project. Client,lib,Server
*** Client
    make directory called Componets
**** MainLayout.jsx
     MainLayout = React.createClass({
     render(){
     return(
     <div>
     
*** lib
    make file Router.jsx
    FlowRouter.rount("/", {
    name: "Home",
    action(params){
    renderView(<Home />);
    }
    });
    
    function renderView(componet){
    ReactLayout.render(MainLayout, {
    header: <Header/>,
    content: component,
    footer: <Footer />
    });
    }
* VirtualHost
  /var/www/html
  mkdir site1 site2 
  touch ./site1/index.html ./site2/index.html
  /etc/apache2
  touch ./sites-available/site1.conf ...site2
  <VirtualHost *:80>
  ServerName example.com; site1.localhost
  DocumentRoot /var/www/html/site1
  </VirtualHost>
  
  /etc/hosts
  127.0.0.1 site1.localhost ...site2
  sudo systemctl start apache2
  sudo a2ensite site1 site2
  sudo systemct restart apache2
* Wordpress
  Download wordpress.
  cp wordpress /var/www/html/
  /etc/apache2/sites-available
  sudo a3enmod rewrite
  touch wordpress.config
  <VirtualHost *:80>
  ServerName wordpress.localhost
  DocumentRoot /var/www/html/wordpress
  <Directory />
  Options FollowSymLinks
  AllowOerride All
  </Directory>
  
  <Directory /var/www/html/wordpress
  Options Indexes FollowSymLinks MultiViews
  AllowOerride All
  Order allow,deny
  allow from all
  </Directory>
  </VirtualHost>
  sudo a2ensite wordpress
  sudo systemctl restart apache
  wordpress.localhost

* Apache
  sudo apt-get install apache2 php5 mysql-server php5-common
  sudo systemctl start apache2
  localhost
  sudo chown -R francis:francis /var/www
  cd /etc/apache2
  sudo systemctl restart apache2
  cd /var/www/html
  vi index.php
  <?php
  echo "hello world";
  ?>

** envnars
   export APACHE_RUN_USER=francis
   export APACHE_RUN_GROUP=francis

** hosts
   /etc/hosts
   The local address for any machine is 127.0.0.1
* OpenBox
  sudo apt-get install openbox obconf obmenu
  right click obconf
  obmenu ; in terminal 
  Obmenu is what comes up when you right click.
  sudo apt-get install tint2; this installs a panel.
  sudo apt-get install nitrogen; this allows for a wallpaper.
  In your home directory. .config/openbox/autostart.sh is what you need to edit to start programs.
  Ex: nitrogen --restore
  Ex: tint2
  Ex: ~/.config/openbox/rc.xml
* Web Python
  atp-cache policy python; finds version
  python-pip3; installs modules
  you can call up versions of python Ex: python3.3
  sudo pip install web.py
  
  #+BEGIN_SRC python
        #!/usr/bin/python
        import web

        urls =('/', 'myClass')
        class myClass:
            def GET(self):
                return "<h1>Hello World</h1>"

    class secondClass:
        def GET(self):
            return "<h1>This is a second rout</h1>"
    application = web.application(urls, globals()).wsgifunc()
  #+END_SRC
* User accounts
  sudo adduser nick2
  su nick2; allows you to login as user
  sudo adduser nick2 sudo; gives sudo to nick2
  sudo deluser nick2; removes user
  sudo passwd nick2; changes password
  sudo groupadd tt; adds group tt
  sudo chown nick2:tt filename; changes group access
  sudo adduser nick2 tt; adds user to group tt
* Networking
  192.168.0.1; is likely the address if router
  192.168.0.19 ..20..21; for computers on the network
  127.0.0.1; always means ip address for this computer
** ifconfig
   eno1 is Ethernet
   lo local loopback localhost
   wlo1 wireless internet RX received TX transferred out
** tcpdump
   runs until you cancel 
   sudo tcpdump -c 10; gets 10 packets
   order: time, from ip, to ip (router) (or visa versa), where it ends up
   sudo tcpdump -c 5 -A; prints out 5 of actually packets
   sudo tcpdump -c 5 -i wlo1; listens to the interface given
   sudo tcpdump -XX -i wlo1; gives hexdump of device
   sudo tcpdump -1 wlo1 port 22; listens to port 22
** netstat
   netstat -nr; n prints as ip address rather the domain names; r kernel ip routing table
   netstat -i ; kernel interface table; shows usage of devices
   netstat -ta ; active sockets
** hosts file
   /etc/hosts
   Internal DNS overrides everything else
   ip you want to rout to, domain name, ales 
   sudo hostnamectl set-hostname Megazord
   update file to megazord
   sudo service hostname restart
** tracerout
   tracerout google.com; will find its way to domain google
** nmap
   nmap ipaddress; what ports are available
   nmap -v ipaddress; verbose, finds closed ports, shows scan
   nmap ip,1; finds router
   nmap ip.1-100; scans a range of ipaddress
   nmap 192.168.0.*; to find all address on local hosts
   nmap domainname; works too
   nmap -iL filename; will scan all address in that file
   nmap -A ip; tells you operating system
   nmap -sP ; what servers and devices are running
   nmap --reason;the reason a port is a state
   nmap --iflist;show host interfaces
* ssh
  ssh you@ipaddress
  exit closes connection
  install openssh-server
  /etc/ssh/sshd_config
  change port
  authentication permitrootlogin to no
  AllowUsers you
  sudo systemctl restart ssh
  you have to go though your router to your machine so you might need port forwarding.
* sftp
  sftp you@ipaddress
  ls gives list on remote host
  lls gives list on local host
  put filename; uploads to remotehost
  get filename; downloads to localhost
* parted
  lsblk
  sudo parted /dev/sdb ; will take you to parted cmd
  mklabel gpt; or msdos for MRB, makes partition table
  ; to start partitioning us mkpart in this order
  ; mkpart 'type of partition' 'file system' start end
  mkpart primary ext4 1MiB 100%; to make one big partition
  ;making multi partition
  mkpart primary ext4 1MiB 2GB; makes a two gig ext4 partition
  mkpart primary ext4 2GB 5GB; makes 3 gig after the two
  mkpart primary ext4 5GB 100%; makes third partition with the rest of the drive
  ;can be xt4 ntfs vfat btrfs...
  print; to check
  quit
  ; now you can make file system on new partition
  sudo mkfs.ext4 /dev/sdb1; ...
* dd
  sudo dd bs=4M if=*.iso of=/dev/sdb status=progress oflag=sync
  bs=4M; 4MB blocksize
  if=filename ; input file we to be copied
  of=filename ; output file (device) to write to
  status=progress ; shows progress of dd
  oflag=sync ; synced after each block might slow write but all data gets synced
* Arch
  You will be logged into zsh shell as root.
** Internet Configuration
   ip a ; will find your ip if you are pluged in.
   wifi-menu; to get ip from wifi.
** Disks
*** Partitioning
    lsblk ; To check drives.
    fdisk /dev/sda ; If sda is the drive.
    g ; For G.P.T.
    n ; New partition.
    1 ; First partition, this is default.
    2048 ; This gives you a megabyte of space, this is default.
    +512MB ; This gives 512MB for EFI partition.
    n ; New partition.
    \r ; Default 2.
    \r ; Default starts at end of last partition.
    \r ; Default will take up the rest of the disk.
    w ; Write changes.
    lsblk ; Check your work.
*** Formatting
    mkfs.fat -F32 /dev/sda1 ; makes a fat32 format for EFI.
    mkfs.ext4 /dev/sda2 ; ext4 format for root partition.
    lsblk ; Check your work.
*** Mounting
    mount /dev/sda2 /mnt ; Mounts where the system will be installed.
    mkdir /mnt/boot ; Makes a boot directory.
    mkdir /mnt/boot/EFI ; Makes a EFI directory.
    mount /dev/sda1 /mnt/boot/EFI ; Mounts the boot directory.
    lsblk ; Check your work.
** Base Install
   pacstrap /mnt base linux linux-firmware vi ; Installs base utilities. So you can install Arch.
** FSTAB File
   genfstab -U /mnt >> /mnt/etc/fstab
   cat /mnt/etc/fstab ; Check your work. Should see root and EFI partition.
** Enter Install
   arch-chroot /mnt ; Starts the arch install program. In the installation and no longer the installer.
** SWAP File
   fallocate -l 4GB /swapfile ; Makes swap file.
   chmod 600 /swapfile ; File can be read/write from root.
   mkswap /swapfile ; This makes the swap.
   swapon /swapfile ; This activates the swap.
   vi /etc/fstab ; Enter vim to edit fstab file.
   /swapfile none swap defaults 0 0 ; Append that to fstab.
   :wq ; Don't forget to save.
** Time Zone
   ln -sf /usr/share/zoneinfo/America/Detroit /etc/localtime ; Change file to where you are.
   hwclock --systohc ; Syncs the computer clock.
   vi /etc/locale.gen
   en_US.UTF-8 UTF-8 ; un-comment.
   :wq ; Save your work.
   locale-gen ; Generates local.
   vim /etc/locale.conf
   LANG=en_US.UTF-8
   :wq
** Hostname
   vi /etc/hostname
   arch
   :wq
   vi /etc/hosts
   127.0.0.1    localhost
   ::1          localhost
   127.0.1.1    arch.localdomain   arch
   :wq
** Root Password
   passwd
   ; Enter your root password twice.
** Boot Loader
   paceman -S grub efibootmgr networkmanager network-manager-applet wireless_tools wpa_supplicant os-prober mtools dosfstools base-devl linux-headers
   ; Accept all defaults.
   grub-install --target=x86_64-efi --efi-directory=/boot/EFI --bootloader-id=GRUB ; That's three arguments to grub install.
   grub-mkconfig -o /boot/grub/grub.cfg ; Makes grub configure file.
** Exit Install
   exit ; Gets you back outside of Arch.
** Unmount
   umount -a ; Un-mounts everything. It's OK if you get errors.
** Reboot
   reboot ; Reboots the system. You can take USB stick out. You should be greeted with GRUB bootloader when it restarts.
** Activate Internet
   systemctl start NetworkManager; Activates wired internet. If you have WiFi.
   nmtui ; for WiFi network. Edit Connection put in password. Then go to Activate a connection. Activate then exit out.
   systemctl enable NetworkManager ; Starts network automatically on boot.
** New User
   useradd -m -G wheel your-username
   passwd your-username ; Type users password.
   EDITOR=vi visudo ; We are giving the user super user access.
   ; Un-comment.
   %wheel ALL=(ALL) ALL ; Careful this the first one.
   :wq
** Graphics Driver
* Example of what you might see.
    #+BEGIN_SRC bash
timedatectl set-ntp true
fdisk -l
fdisk /dev/sda
m #for help
g #for gtp partition table
n #for new partition
#it will ask for partition number accept default.
#it will ask for first sector accept default.
+512 MiB # this for the boot partition.
n# for new partition.
#default
#default
+4G # for swap mem
n # partion for os
#default
#default
#default
t #changing the types of partion
1 # number of partion in this case boot
1 # is EFI type press capital L for listing
t
2 # now for swap
19
t
3
24 #linux root 86-64
w # to end
mkfs.vfat /dev/sda1 #fat32 file system for efi
mkswap /dev/sda2
swapon /dev/sda2 #enables swap partition
mkfs.ex4 /dev/vda3
mount /dev/sda3 /mnt # mounts os partion
mkdir /mnt/boot
mount /dev/sda1 /mnt/boot # mounts boot partion
pacstrap /mnt base base-devel linux linux-firmware vim man-db man-pages inetutils netctl dhcpcd s-nail intel-ucode
genfstab -U /mnt >> /mnt/etc/fstab
arch-chroot /mnt
ln -sf /usr/share/zoneinfo/America/Detroit /etc/localtime
hwclock -systohc
vim /etc/locale.gen
# uncomment en_US.UTF-8
locale-gen
echo 'LANG=en_US.UTF-8' > /etc/locale.conf  
echo BlightPC >etc/hostname 
vim /etc/hosts 127.0.0.1 
localhost ::1 localhost
127.0.1.1 BlightPC.localdomain BlightPC 
:wq 
passwd password #makes root password
bootct --path=/boot install 
vim /boot/loader/loader.conf 
default arch-* :wq 
vim/boot/loader/entries/arch.conf 
title Arch Linux 
linux /vmlinux-linux 
initrd /intel-ucode.img #only if you installed micro code wont boot if you didn't
initrd /initramfs-linux.img
options root=UUID=id rw #use r! blkid to find code and past it for third os partion.
:wq
exit
reboot
  
  #+END_SRC

